import asyncio

import platform

from pathlib import Path

import yt_dlp
from aiogram.filters import Command
from aiogram import Router

from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram import F

from app.config import settings
from app.helpers import progress_hook_factory, compress_video, get_video_info
from app.keyboards.main import yes_no_keyboard

router = Router()

download_tasks = {}


@router.message(Command("help"))
async def help(message: Message):
    await message.answer("–ï—Å–ª–∏ –≤—ã —Å—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º, "
                         "—Ç–æ–≥–¥–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–∑–≤–∞—Ç—å /menu –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è. "
                         "–ï—Å–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è —Ç–æ–≥–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ @PozharAlex "
                         "–∏ –æ–ø–∏—Å–∞—Ç—å —Ü–∏–∫–ª –≤–∞—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä–∏–≤–æ–¥–∏–º—ã—Ö –∫ –æ—à–∏–±–∫–∞–º —Ä–∞–±–æ—Ç—ã. "
                         "–≠—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.")


@router.message(F.text.startswith("https://"))
async def handle_url(message: Message):
    await message.reply("–°–∫–∞—á–∞—Ç—å –≤–∏–¥–∏–∫?", reply_markup=yes_no_keyboard())


@router.callback_query(F.data == "no")
async def delete_message(callback: CallbackQuery, ):
    await callback.message.delete()


@router.callback_query(F.data.startswith("yes"))
async def download_video(callback: CallbackQuery):
    try:
        url = callback.message.reply_to_message.text
        loop = asyncio.get_running_loop()

        await callback.message.edit_text("‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ...")

        info = await get_video_info(url, loop)
        duration = info.get("duration", 0)

        if duration > settings.MAX_DURATION_VIDEO:
            await callback.message.edit_text(f"‚ùå –í–∏–¥–µ–æ –¥–ª–∏—Ç—Å—è –±–æ–ª—å—à–µ {round(settings.MAX_DURATION_VIDEO / 60)}"
                                             f" –º–∏–Ω—É—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–∫–∞—á–∞–Ω–æ.")
            return

        ydl_opts = {
            'concurrent_fragments': 16,
            'outtmpl': f"{settings.DOWNLOAD_FOLDER}/"
                       f"%(uploader)s/"
                       f"%(upload_date>%Y-%m-%d)s_%(uploader)s#%(title)s.%(ext)s",

            'merge_output_format': 'mp4',
            'nocheckcertificate': True,
            'throttled_rate': '500K',
            'socket_timeout': 30,

        }
        if "youtube" in url and "shorts" not in url:
            ydl_opts['format'] = 'best[height<=720]/best[height<=720]'

        hook = progress_hook_factory(callback, loop)
        ydl_opts['progress_hooks'] = [hook]

        if platform.system() == 'Windows':
            ydl_opts['ffmpeg_location'] = settings.FFMPEG_PATH

        await callback.message.edit_text("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...")

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            def download():
                return ydl.extract_info(url, download=True)

            info = await loop.run_in_executor(None, download)
            filename = Path(ydl.prepare_filename(info))


        if filename.stat().st_size > 50 * 1024 * 1024:
            await callback.message.edit_text("–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (>50–ú–ë). –°–∂–∏–º–∞—é...")
            filename_compressed = filename.with_name(filename.stem + "_compressed.mp4")

            await asyncio.to_thread(compress_video, str(filename), str(filename_compressed), target_size_mb=50)

            if filename_compressed.stat().st_size <= 50 * 1024 * 1024:
                filename = filename_compressed
            else:
                filename_compressed.unlink()
                await callback.message.edit_text("–î–∞–∂–µ –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è –≤–∏–¥–µ–æ –±–æ–ª—å—à–µ 50–ú–ë üò¢")
                return

        await callback.message.edit_text("‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤ —Ç–µ–ª–µ–≥—É...")
        video = FSInputFile(filename)
        await callback.message.answer_video(video, supports_streaming=True, )
        await callback.message.delete()
        filename.unlink()

    except Exception as ex:
        await callback.message.edit_text("–ù–µ –º–æ–≥—É ü•≤ " + str(ex))
